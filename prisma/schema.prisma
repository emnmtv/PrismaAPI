

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/prisma_db"
}

generator client {
  provider = "prisma-client-js"
}

// models/schema.prisma
model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String
  firstName        String?
  lastName         String?
  phoneNumber      String?
  address          String?
  dateOfBirth      DateTime?
  verified         Boolean  @default(false)
  verificationCode String?
  role             String   @default("user") // user, creator, admin
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  payments         Payment[] // Add this inverse relation for payments
  creatorProfile   CreatorProfile?
  posts            Post[]   // Add this relation field for inverse relation
   
}

model CreatorProfile {
  id               Int      @id @default(autoincrement())
  userId           Int     @unique
  offers           String  // e.g., "luthier, guitarist"
  bio              String?
  profession       String? // e.g., "Musician", "Producer", etc.
  typeOfProfession String? // e.g., "Guitarist", "Drummer", etc.
  genre            String? // e.g., "Rock", "Classical", etc.
  earnings         Float   @default(0.0) // New field for creator earnings
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User    @relation(fields: [userId], references: [id])
}


model Post {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String
  image       String?   // Base64 encoded image
  video       String?   // Base64 encoded video
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
}

model Payment {
  id               Int      @id @default(autoincrement())
  userId           Int
  referenceNumber  String
  checkoutUrl      String
  amount           Int      // Store amount in the smallest unit (e.g., cents)
  description      String
  remarks          String?  // Add remarks field
  status           String   // Store the status of the payment (e.g., "unpaid", "paid")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id])
}

