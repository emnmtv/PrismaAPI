datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/prisma_db"
}

generator client {
  provider = "prisma-client-js"
}

// models/schema.prisma
model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String
  firstName        String?
  lastName         String?
  phoneNumber      String?
  address          String?
  dateOfBirth      DateTime?
  verified         Boolean  @default(false)
  verificationCode String?
  resetCode        String?   // Add this field for password reset code
  resetCodeExpiry  DateTime? // Add this field for code expiration
  role             String   @default("user") // user, creator, admin
  profilePicture   String?  // Add this field
  coverPhoto       String?  // Add this field
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  payments         Payment[] @relation("UserPayments") // Add this inverse relation for payments
  clientPayments   Payment[] @relation("ClientPayments") // New relation for payments where user is a client
  creatorProfile   CreatorProfile?
  posts            Post[]   // Add this relation field for inverse relation
  sentMessages     Message[] @relation("SentMessages") // Add this relation
  receivedMessages Message[] @relation("ReceivedMessages") // Add this relation
  receivedRatings  Rating[] @relation("ReceivedRatings")
  givenRatings     Rating[] @relation("GivenRatings")
  receivedEngagements Engagement[] @relation("ReceivedEngagements") // Add relation for received engagements
  givenEngagements Engagement[] @relation("GivenEngagements") // Add relation for given engagements
  analytics        AnalyticsData[] @relation("CreatorAnalytics") // Add relation for analytics data
  notifications    Notification[] // Add relation for notifications
  copyrightStrikes Int         @default(0) // Track number of copyright strikes
  underReview      Boolean     @default(false) // Flag for accounts under admin review
  restrictionType  String?     // Type of restriction: 'warning' or 'suspended'
  restrictionExpiresAt DateTime? // When the restriction expires
}

model CreatorProfile {
  id               Int      @id @default(autoincrement())
  userId           Int     @unique
  offers           String  // e.g., "luthier, guitarist"
  bio              String?
  genre            String?
  profession       String? // e.g., "Musician", "Producer", etc.
  typeOfProfession String? // Main category: "guitarist", "bassist", etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isVerified       Boolean  @default(false)
  creatorLevel     Float    @default(0.0) // Rating from 0 to 5, based on engagement and ratings
  portfolioFile    String?  // Store the file path
  resumeFile       String?  // Store the file path
  socialLinks      SocialMediaLink[]

  user             User    @relation(fields: [userId], references: [id])
}

model SocialMediaLink {
  id               Int      @id @default(autoincrement())
  creatorProfileId Int
  platform         String   // e.g., "Facebook", "Twitter", "Instagram", etc.
  url             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creatorProfile   CreatorProfile @relation(fields: [creatorProfileId], references: [id])

  @@unique([creatorProfileId, platform]) // Ensure one platform per creator
}

model Post {
  id                Int       @id @default(autoincrement())
  userId            Int
  title             String
  description       String
  detailedDescription String?  
  amount            Float?    
  remarks           String?   
  image             String?   
  video             String?   
  audio             String?   // New field for audio files
  copyrightInfo     String?   @db.Text // JSON string containing copyright detection results - using TEXT type
  status            String    @default("pending") // "pending", "approved", "rejected"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  engagements       Engagement[] // Add relation for engagements on posts

  user              User      @relation(fields: [userId], references: [id])
}

model Payment {
  id               Int      @id @default(autoincrement())
  userId           Int
  clientId         Int
  referenceNumber  String   @unique
  checkoutUrl      String
  amount           Int      // Store amount in the smallest unit (e.g., cents)
  description      String
  remarks          String?  // Add remarks field
  status           String   // Store the status of the payment (e.g., "unpaid", "paid")
  orderStatus      String   @default("pending") // New field for order status
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  rating           Rating?
  adminFee         Int?     // Store the admin fee amount (20% of the total)
  isFeeClaimed     Boolean  @default(false) // Track if the admin fee has been claimed/processed

  user             User     @relation("UserPayments", fields: [userId], references: [id]) // Relation to User
  client           User     @relation("ClientPayments", fields: [clientId], references: [id]) // Relation to User
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  Int
  receiverId Int
  content   String
  createdAt DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Rating {
  id          Int      @id @default(autoincrement())
  userId      Int      // Creator/Seller being rated
  clientId    Int      // Client who gave the rating
  paymentId   Int      @unique // Associated payment/order
  rating      Float    // Rating value (e.g., 1-5)
  review      String?  // Optional review text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("ReceivedRatings", fields: [userId], references: [id])
  client      User     @relation("GivenRatings", fields: [clientId], references: [id])
  payment     Payment  @relation(fields: [paymentId], references: [id])
}

model Engagement {
  id          Int       @id @default(autoincrement())
  creatorId   Int       // The creator who receives the engagement
  viewerId    Int?      // The user viewing/engaging (optional, for anonymous views)
  postId      Int?      // If engagement is related to a post
  sourceId    Int?      // Generic source ID (could be post ID, profile ID, etc.)
  type        String    // Type of engagement: profile_view, post_view, audio_play, click_through
  duration    Int?      // For tracking audio play duration in seconds
  ipAddress   String?   // IP address of the viewer (anonymized if needed)
  deviceInfo  String?   // Device type, browser, OS info
  location    String?   // Geographic location info (country, city)
  sessionId   String?   // To track continuous engagement from the same session
  referrerUrl String?   // Where the user came from
  exitUrl     String?   // Where the user went after engagement (for click_through)
  metadata    String?   @db.Text // JSON string with additional data
  createdAt   DateTime  @default(now())
  
  creator     User      @relation("ReceivedEngagements", fields: [creatorId], references: [id])
  viewer      User?     @relation("GivenEngagements", fields: [viewerId], references: [id])
  post        Post?     @relation(fields: [postId], references: [id])
}

model AnalyticsData {
  id             Int       @id @default(autoincrement())
  creatorId      Int       // The creator the analytics are for
  date           String    // Date in YYYY-MM-DD format
  type           String    // Type of metric: profile_views, post_views, etc.
  count          Int       @default(0) // Count of the metric
  totalDuration  Int?      // Total duration for time-based metrics (in seconds)
  uniqueVisitors Int?      // Count of unique visitors based on IP/session
  bounceRate     Float?    // Percentage of visitors who leave after one engagement
  conversionRate Float?    // Percentage of viewers who performed desired action (e.g., contact, payment)
  avgEngagementTime Float? // Average time spent on profile/content
  deviceBreakdown String?  @db.Text // JSON with device type percentages
  locationData    String?  @db.Text // JSON with geographic breakdown
  referrerData    String?  @db.Text // JSON with referrer source breakdown
  
  creator        User      @relation("CreatorAnalytics", fields: [creatorId], references: [id])
  
  @@unique([creatorId, date, type]) // Ensure one record per creator-date-type
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int      // User receiving the notification
  type        String   // Type of notification (e.g., "copyright_strike", "account_review", "system")
  title       String   // Short title/summary
  message     String   @db.Text // Full notification message
  read        Boolean  @default(false) // Whether the notification has been read
  relatedId   Int?     // Optional ID of related entity (like a post)
  metadata    String?  @db.Text // Additional data as JSON string
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
}

// New model for app-wide analytics
model AppAnalytics {
  id                  Int       @id @default(autoincrement())
  date                String    // Date in YYYY-MM-DD format
  totalTransactions   Int       @default(0) // Total number of transactions
  totalAmount         Int       @default(0) // Total amount processed in the smallest unit (e.g., cents)
  adminRevenue        Int       @default(0) // Admin revenue (20% of transactions)
  userCount           Int       @default(0) // Total user count
  newUserCount        Int       @default(0) // New users registered on this date
  activeUserCount     Int       @default(0) // Users who were active on this date
  postCount           Int       @default(0) // Total posts
  newPostCount        Int       @default(0) // New posts created on this date
  engagementCount     Int       @default(0) // Total engagements (views, plays, etc.)
  messageCount        Int       @default(0) // Total messages exchanged
  copyrightStrikes    Int       @default(0) // Copyright strikes issued
  averageRating       Float?    // Average rating across all creators
  conversionRate      Float?    // Percentage of post views that lead to transactions
  topCreators         String?   @db.Text // JSON array of top performing creators
  topPosts            String?   @db.Text // JSON array of top performing posts
  deviceStats         String?   @db.Text // JSON with device usage breakdown
  metricBreakdown     String?   @db.Text // Detailed breakdown of various metrics as JSON
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@unique([date]) // Only one record per day
}

