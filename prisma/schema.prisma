datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/prisma_db"
}

generator client {
  provider = "prisma-client-js"
}

// models/schema.prisma
model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String
  firstName        String?
  lastName         String?
  phoneNumber      String?
  address          String?
  dateOfBirth      DateTime?
  verified         Boolean  @default(false)
  verificationCode String?
  role             String   @default("user") // user, creator, admin
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  payments         Payment[] @relation("UserPayments") // Add this inverse relation for payments
  clientPayments   Payment[] @relation("ClientPayments") // New relation for payments where user is a client
  creatorProfile   CreatorProfile?
  posts            Post[]   // Add this relation field for inverse relation
  sentMessages     Message[] @relation("SentMessages") // Add this relation
  receivedMessages Message[] @relation("ReceivedMessages") // Add this relation
  receivedRatings  Rating[] @relation("ReceivedRatings")
  givenRatings     Rating[] @relation("GivenRatings")
}

model CreatorProfile {
  id               Int      @id @default(autoincrement())
  userId           Int     @unique
  offers           String  // e.g., "luthier, guitarist"
  bio              String?
 genre              String?
  profession       String? // e.g., "Musician", "Producer", etc.
  typeOfProfession String? // Main category: "guitarist", "bassist", etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User    @relation(fields: [userId], references: [id])
}

model Post {
  id                Int       @id @default(autoincrement())
  userId            Int
  title             String
  description       String
  detailedDescription String?  
  amount            Float?    
  remarks           String?   
  image             String?   
  video             String?   
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id])
}

model Payment {
  id               Int      @id @default(autoincrement())
  userId           Int
  clientId         Int
  referenceNumber  String   @unique
  checkoutUrl      String
  amount           Int      // Store amount in the smallest unit (e.g., cents)
  description      String
  remarks          String?  // Add remarks field
  status           String   // Store the status of the payment (e.g., "unpaid", "paid")
  orderStatus      String   @default("pending") // New field for order status
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  rating           Rating?

  user             User     @relation("UserPayments", fields: [userId], references: [id]) // Relation to User
  client           User     @relation("ClientPayments", fields: [clientId], references: [id]) // Relation to User
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  Int
  receiverId Int
  content   String
  createdAt DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Rating {
  id          Int      @id @default(autoincrement())
  userId      Int      // Creator/Seller being rated
  clientId    Int      // Client who gave the rating
  paymentId   Int      @unique // Associated payment/order
  rating      Float    // Rating value (e.g., 1-5)
  review      String?  // Optional review text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("ReceivedRatings", fields: [userId], references: [id])
  client      User     @relation("GivenRatings", fields: [clientId], references: [id])
  payment     Payment  @relation(fields: [paymentId], references: [id])
}

